const ping = require("ping");
const DEFAULT_TIMEOUT = 5; // seconds
const ICMP_COUNT_FLAG = process.platform === "win32" ? "-n" : "-c";

async function pingHost(ip) {
  try {
    const res = await ping.promise.probe(ip, {
      timeout: DEFAULT_TIMEOUT,
      extra: [ICMP_COUNT_FLAG, "1"],
    });
    return res.alive ? "Online" : "Offline";
  } catch {
    return "Offline";
  }
}

module.exports = { pingHost };



--- a/App.js
+++ b/App.js
@@
- const ping = require("ping");
+ const { pingHost } = require("./services/pingService");

 // …

 async function pingDevices() {
-  for (const ip of devices) {
-    let newStatus = "Offline";
-    try {
-      const res = await ping.promise.probe(ip);
-      newStatus = res.alive ? "Online" : "Offline";
-    } catch {
-      /* keep Offline */
-    }
-    if (deviceStatus[ip] !== newStatus) {
-      logDeviceChange(ip, newStatus);
-    }
-    deviceStatus[ip] = newStatus;
-  }
-  console.log("Updated device status:", deviceStatus);
+  // ping all in parallel, but limit concurrency to avoid bursts
+  const limit = require("p-limit")(20);
+  await Promise.all(
+    devices.map(ip =>
+      limit(async () => {
+        const newStatus = await pingHost(ip);
+        if (deviceStatus[ip] !== newStatus) {
+          logDeviceChange(ip, newStatus);
+        }
+        deviceStatus[ip] = newStatus;
+      })
+    )
+  );
+  console.log("Updated device status:", deviceStatus);
 }






--- a/services/excelService.js
+++ b/services/excelService.js
@@
- const ping = require("ping");
- const pLimit = require("p-limit");
+ const pLimit = require("p-limit");
+ const { pingHost } = require("./pingService");

 // …

- function pingDevice(ip) {
-  return new Promise(resolve =>
-    ping.sys.probe(ip, alive => resolve(alive ? "Online" : "Offline"))
-  );
- }
+ // replace both sys.probe and promise.probe with our unified helper
+ async function pingDevice(ip) {
+   if (!ip) return "IP Address Missing";
+   return await pingHost(ip);
+ }

- async function pingDevices(devices) {
-  cache.clear();
-  const limit = pLimit(10);
-  await Promise.all(devices.map(dev => limit(async () => {
-    if (!dev.ip_address) {
-      dev.status = "IP Address Missing";
-      return;
-    }
-    if (cache.has(dev.ip_address)) {
-      dev.status = cache.get(dev.ip_address);
-    } else {
-      dev.status = await pingDevice(dev.ip_address);
-      cache.set(dev.ip_address, dev.status);
-    }
-    // record history in daily file via app.js
-  })));
-}
+ async function pingDevices(devices) {
+  cache.clear();
+  const limit = pLimit(20);
+  await Promise.all(
+    devices.map(dev =>
+      limit(async () => {
+        const status = cache.get(dev.ip_address) || await pingDevice(dev.ip_address);
+        cache.set(dev.ip_address, status);
+        dev.status = status;
+      })
+    )
+  );
+}
























// Function to Ping a Single Device with timeout
const pingDevice = (ip, timeout = 5000) => {
  return new Promise((resolve) => {
    let finished = false;

    // Fallback if ping.sys.probe never calls back
    const timer = setTimeout(() => {
      if (!finished) {
        finished = true;
        resolve("Offline");  // or "Unknown" if you prefer
      }
    }, timeout);

    // Actual ping
    ping.sys.probe(ip, (isAlive) => {
      if (!finished) {
        clearTimeout(timer);
        finished = true;
        resolve(isAlive ? "Online" : "Offline");
      }
    });
  });
};

// Function to ping devices and cache results
const cache = new Map();

const pingDevices = async (devices) => {
  const limit = pLimit(10);

  const pingPromises = devices.map((device) =>
    limit(async () => {
      if (!device.ip_address) {
        device.status = "IP Address Missing";
        return;
      }

      if (cache.has(device.ip_address)) {
        device.status = cache.get(device.ip_address);
      } else {
        // Use the timeout-enabled pingDevice
        device.status = await pingDevice(device.ip_address, 5000);
        cache.set(device.ip_address, device.status);
      }

      monitorDevice(device);
    })
  );

  await Promise.all(pingPromises);
};













// Function to Ping a Single Device with timeout
const pingDevice = (ip, timeout = 5000) => {
  return new Promise((resolve) => {
    let finished = false;

    // Fallback if ping.sys.probe never calls back
    const timer = setTimeout(() => {
      if (!finished) {
        finished = true;
        resolve("Offline");  // or "Unknown"
      }
    }, timeout);

    // Actual ping
    ping.sys.probe(ip, (isAlive) => {
      if (!finished) {
        clearTimeout(timer);
        finished = true;
        resolve(isAlive ? "Online" : "Offline");
      }
    });
  });
};





const pingDevices = async (devices) => {
  const limit = pLimit(10);
  const pingPromises = devices.map((device) =>
    limit(async () => {
      if (!device.ip_address) {
        device.status = "IP Address Missing";
        return;
      }
      device.status = await pingDevice(device.ip_address);  // uses new timeout
      cache.set(device.ip_address, device.status);
      monitorDevice(device);
    })
  );
  await Promise.all(pingPromises);
};














// Function to load Excel data into cache
const loadExcelData = () => {
  if (Object.keys(allData).length === 0) {
    const loadSheet = (filePath) => {
      const workbook = xlsx.readFile(filePath);
      return normalizeHeaders(
        xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]])
      );
    };

    allData = {
      archivers: loadSheet(archiverPath),
      controllers: loadSheet(controllerPath),
      cameras: loadSheet(cameraPath),
      servers: loadSheet(serverPath),
    };

    // Initialize empty history arrays
    for (const deviceList of Object.values(allData)) {
      deviceList.forEach((device) => {
        if (!device.history) device.history = [];
      });
    }

    console.log("Excel Data Loaded:", Object.keys(allData));
  }
  return allData;  // ← Make sure we return the data
};












Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False



Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True




New-NetFirewallRule `
  -DisplayName "Allow NodeJS 3000" `
  -Direction Inbound `
  -LocalPort 3000 `
  -Protocol TCP `
  -Action Allow




Get-NetFirewallRule -DisplayName "Allow NodeJS 3000" | Format-List Name,DisplayName,Direction,Action,Enabled





New-NetFirewallRule -Name "AllowFrontend3000" -DisplayName "Allow Frontend Port 3000" -Enabled True -Direction Inbound -Protocol TCP -LocalPort 3000 -Action Allow
Get-NetFirewallRule -Name "AllowFrontend3000"



const path = require("path");

// serve everything in public/ as static files
app.use(express.static(path.join(__dirname, "public")));

// (Optional) if you want `/` to redirect to your index.html:
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});





const ExcelJS = require('exceljs');
const path = require('path');

let allData = {};

const loadExcelData = async () => {
  if (Object.keys(allData).length === 0) {
    const loadSheet = async (filePath) => {
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(filePath);

      const worksheet = workbook.worksheets[0];
      const sheetData = [];

      const headers = [];

      worksheet.getRow(1).eachCell((cell, colNumber) => {
        headers[colNumber] = cell.value;
      });

      worksheet.eachRow((row, rowNumber) => {
        if (rowNumber === 1) return; // Skip header row

        const rowData = {};
        row.eachCell((cell, colNumber) => {
          const header = headers[colNumber];
          if (header) rowData[header] = cell.value;
        });

        sheetData.push(rowData);
      });

      return sheetData;
    };

    allData = {
      archivers: await loadSheet(archiverPath),
      controllers: await loadSheet(controllerPath),
      cameras: await loadSheet(cameraPath),
      servers: await loadSheet(serverPath)
    };

    for (const deviceList of Object.values(allData)) {
      deviceList.forEach(device => {
        if (!device.history) {
          device.history = [];
        }
      });
    }

    console.log("Excel Data Loaded:", Object.keys(allData));
  }

  return allData;
};

module.exports = { loadExcelData };
